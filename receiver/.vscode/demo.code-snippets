{
	"Import all libraries": {
		"scope": "cpp",
		"prefix": "rec1",
		"body": [
			"#include <xCore.h>",
            "#include <xVersion.h>",
            "#include \"xOD01.h\"",
            "#include <xOC03.h>",
            "#include <xSL06.h>",
            "",
            "xOD01 screen;",
            "xOC03 relay;",
            "xSL06 lightSensor;",
		],
		"description": "Import all libraries for sender device"
	},
	"Start all sensors": {
        "scope": "cpp",
        "prefix": "rec2",
        "body": [
            "Wire.begin();",
            "screen.begin();",
            "relay.begin();",
            "lightSensor.begin();",
            "lightSensor.setProximityGain(PGAIN_2X);",
            "lightSensor.enableProximitySensor(false);",
            "",
            "delay(5000);",
            "screen.println(\"Sensors ready!\");"
        ],
        "description": "Start all sensors"
    },
    "Detect proximity": {
        "scope": "cpp",
        "prefix": "rec3",
        "body": [
            "uint8_t proximity = 0;",
            "lightSensor.getProximity(proximity);",
            "if (proximity > 100) {",
            "\t//detected something close",
            "}",
            "delay(500);"
        ],
        "description": "Gesture detection"
    },
    "Switch": {
        "scope": "cpp",
        "prefix": "rec4",
        "body": [
            "if (isOn == 0) {",
            "\tscreen.println(\"ON!\");",
            "\trelay.write(HIGH);",
            "\tisOn = 1;",
            "} else {",
            "\tscreen.println(\"OFF!\");",
            "\trelay.write(LOW);",
            "\tisOn = 0;",
            "}"
        ],
        "description": "Turn on and off"
    },
    "Replace receiver": {
        "scope": "cpp",
        "prefix": "rec5",
        "body": [
            "#include <xCore.h>",
            "#include <xVersion.h>",
            "#include \"xOD01.h\"",
            "#include <xOC03.h>",
            "#include <xSL06.h>",
            "",
            "#include <MQTT.h>",
            "#include <CloudIoTCore.h>",
            "#include <WiFi.h>",
            "#include <WiFiClientSecure.h>",
            "",
            "#include \"config.h\"",
            "#include <stdlib.h>",
            "#include <stdio.h>",
            "",
            "xOD01 screen;",
            "xOC03 relay;",
            "xSL06 lightSensor;",
            "",
            "WiFiClientSecure *netClient;",
            "MQTTClient *mqttClient;",
            "CloudIoTCoreDevice *device;",
            "unsigned long iss = 0;",
            "String jwt;",
            "",
            "void setup() {",
            "\tWire.begin();",
            "\tscreen.begin();",
            "\trelay.begin();",
            "\tlightSensor.begin();",
            "\tlightSensor.setProximityGain(PGAIN_2X);",
            "\tlightSensor.enableProximitySensor(false);",
            "",
            "\tdelay(5000);",
            "\tscreen.println(\"Sensors ready!\");",
            "",
            "\tinitWifi();",
            "\tsyncTime();",
            "\tinitCloud();",
            "}",
            "",
            "void initWifi() {",
            "\tscreen.println(\"Connecting to:\");",
            "\tscreen.println(WIFI_SSID);",
            "\tWiFi.begin(WIFI_SSID, WIFI_PASSWORD);",
            "\twhile (WiFi.status() != WL_CONNECTED) {",
            "\t\tscreen.println(\"Retry in 5 secs\");",
            "\t\tWiFi.begin(WIFI_SSID, WIFI_PASSWORD);",
            "\t\tdelay(5000);",
            "\t}",
            "",
            "\tscreen.println(\"Connected to WiFi\");",
            "}",
            "",
            "void syncTime() {",
            "\tconfigTime(0, 0, \"pool.ntp.org\", \"time.nist.gov\");",
            "\twhile (time(nullptr) < 1510644967) {",
            "\t\tdelay(10);",
            "\t}",
            "}",
            "",
            "void initCloud() {",
            "\tdevice = new CloudIoTCoreDevice(project_id, location, registry_id, device_id, private_key_str);",
            "\tnetClient = new WiFiClientSecure();",
            "\tmqttClient = new MQTTClient(512);",
            "\tmqttClient->begin(\"mqtt.googleapis.com\", 8883, *netClient);",
            "\t//*",
            "\tscreen.println(\"MQTT started\");",
            "}",
            "",
            "int isOn = 0;",
            "void loop() {",
            "\tif (!mqttClient->connected()) {",
            "\t\tif (WiFi.status() != WL_CONNECTED) {",
            "\t\t\tinitWifi();",
            "\t\t}",
            "\t\tmqttConnect();",
            "\t}",
            "",
            "\tuint8_t proximity = 0;",
            "\tlightSensor.getProximity(proximity);",
            "\tif (proximity > 100) {",
            "\t\t//detected something close",
            "\t\tif (isOn == 0) {",
            "\t\t\tscreen.println(\"ON!\");",
            "\t\t\trelay.write(HIGH);",
            "\t\t\tisOn = 1;",
            "\t\t} else {",
            "\t\t\tscreen.println(\"OFF!\");",
            "\t\t\trelay.write(LOW);",
            "\t\t\tisOn = 0;",
            "\t\t}",
            "\t}",
            "\tdelay(500);",
            "}",
            "",
            "void mqttConnect() {",
            "\twhile (!mqttClient->connect(device->getClientId().c_str(), \"unused\", getJwt().c_str(), false)) {",
            "\t\tdelay(1000);",
            "\t}",
            "\tscreen.println(\"Connected to MQTT\");",
            "\tmqttClient->subscribe(device->getConfigTopic());",
            "\tmqttClient->subscribe(device->getCommandsTopic());",
            "}",
            "",
            "String getJwt() {",
            "\tif (iss == 0 || time(nullptr) - iss > 3600) {",
            "\t\tiss = time(nullptr);",
            "\t\tjwt = device->createJWT(iss);",
            "\t}",
            "\treturn jwt;",
            "}",
        ],
        "description": "Replace entire receiver"
    },
    "Message handler": {
        "scope": "cpp",
        "prefix": "rec6",
        "body": "mqttClient->onMessage(messageReceived);",
        "description": "Message handler"
    },
    "Message received method": {
        "scope": "cpp",
        "prefix": "rec7",
        "body": [
            "void messageReceived(String &topic, String &payload) {",
            "\tscreen.println(\".\");",
            "\tscreen.println(payload);",
            "\tint i = atoi(payload.c_str());",
            "\tif (i < 50) {",
            "\t\trelay.write(HIGH);",
            "\t} else if (i > 100) {",
            "\t\trelay.write(LOW);",
            "\t}",
            "}"
        ],
        "description": "Message received method"
    },
    "Listen for messages loop": {
        "scope": "cpp",
        "prefix": "rec8",
        "body": [
            "mqttClient->loop();",
            "delay(10);",
            "screen.print(\".\");"
        ],
        "description": "Listen for messages loop"
    }
}