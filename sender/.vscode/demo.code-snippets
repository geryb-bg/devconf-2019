{
	"Import all libraries": {
		"scope": "cpp",
		"prefix": "send1",
		"body": [
			"#include <xCore.h>",
            "#include <xVersion.h>",
            "#include \"xOD01.h\"",
            "#include <xSW02.h>",
            "#include <xSL06.h>",
            "#include <xSH01.h>",
            "",
            "xOD01 screen;",
            "xSW02 tempSensor;",
            "xSL06 lightSensor;",
            "xSH01 touchSensor;"
		],
		"description": "Import all libraries for sender device"
	},
	"Start all sensors": {
        "scope": "cpp",
        "prefix": "send2",
        "body": [
            "Wire.begin();",
            "screen.begin();",
            "tempSensor.begin();",
            "lightSensor.begin();",
            "lightSensor.enableLightSensor(false);",
            "touchSensor.begin();",
            "",
            "delay(5000);",
            "screen.println(\"Sensors ready!\");"
        ],
        "description": "Start all sensors"
    },
    "Detect touch": {
        "scope": "cpp",
        "prefix": "send3",
        "body": [
            "touchSensor.poll();",
            "if (touchSensor.touchDetected()) {",
            "\tif (touchSensor.circleTouched()) {",
            "\t\t//print ambient light",
            "\t} else if (touchSensor.squareTouched()) {",
            "\t\t//print temp",
            "\t}",
            "}",
            "delay(1000);"
        ],
        "description": "Gesture detection"
    },
    "Print values": {
        "scope": "cpp",
        "prefix": "send4",
        "body": [
            "screen.print(\"$1: \");",
            "screen.print(read$1());",
            "screen.println(\" $2\");"
        ],
        "description": "Print values"
    },
    "Read Ambient Light": {
        "scope": "cpp",
        "prefix": "send5",
        "body": [
            "uint16_t readLight() {",
            "\tuint16_t ambientLight = 0;",
            "\tlightSensor.getAmbientLight(ambientLight);",
            "\treturn ambientLight;",
            "}"
        ],
        "description": "Read light method"
    },
    "Read Temperature": {
        "scope": "cpp",
        "prefix": "send6",
        "body": [
            "float readTemperature() {",
            "\ttempSensor.poll();",
            "\treturn tempSensor.getTempC();",
            "}"
        ],
        "description": "Read temperature method"
    },
    "Include libraries": {
        "scope": "cpp",
        "prefix": "send7",
        "body": [
            "#include <WiFi.h>",
            "#include <MQTT.h>",
            "#include <CloudIoTCore.h>",
            "#include <WiFiClientSecure.h>",
            "",
            "#include \"config.h\""
        ],
        "description": "Include libraries"
    },
    "Init vars": {
        "scope": "cpp",
        "prefix": "send8",
        "body": [
            "WiFiClientSecure *netClient;",
            "MQTTClient *mqttClient;",
            "CloudIoTCoreDevice *device;",
            "unsigned long iss = 0;",
            "String jwt;"
        ],
        "description": "Init vars"
    },
    "Initialise WiFi connection": {
        "scope": "cpp",
        "prefix": "send9",
        "body": [
            "void initWifi() {",
            "\tscreen.println(\"Connecting to:\");",
            "\tscreen.println(WIFI_SSID);",
            "\tWiFi.begin(WIFI_SSID, WIFI_PASSWORD);",
            "\twhile (WiFi.status() != WL_CONNECTED) {",
            "\t\tscreen.println(\"Retry in 5 secs\");",
            "\t\tWiFi.begin(WIFI_SSID, WIFI_PASSWORD);",
            "\t\tdelay(5000);",
            "\t}",
            "\tscreen.println(\"Connected to WiFi\");",
            "}"
        ],
        "description": "Initialise WiFi connection"
    },
    "Set time": {
        "scope": "cpp",
        "prefix": "send10",
        "body": [
            "void syncTime() {",
            "\tconfigTime(0, 0, \"pool.ntp.org\", \"time.nist.gov\");",
            "\twhile (time(nullptr) < 1510644967) {",
            "\t\tdelay(10);",
            "\t}",
            "}"
        ],
        "description": "Set Time"
    },
    "Initialise cloud connection": {
        "scope": "cpp",
        "prefix": "send11",
        "body": [
            "void initCloud() {",
            "\tdevice = new CloudIoTCoreDevice(project_id, location, registry_id, device_id, private_key_str);",
            "\tnetClient = new WiFiClientSecure();",
            "\tmqttClient = new MQTTClient(512);",
            "\tmqttClient->begin(\"mqtt.googleapis.com\", 8883, *netClient);",
            "\tscreen.println(\"MQTT started\");",
            "}"
        ],
        "description": "Initialise cloud connection"
    },
    "create jwt method": {
        "scope": "cpp",
        "prefix": "send12",
        "body": [
            "String getJwt() {",
            "\tif (iss == 0 || time(nullptr) - iss > 3600) {",
            "\t\tiss = time(nullptr);",
            "\t\tjwt = device->createJWT(iss);",
            "\t}",
            "\treturn jwt;",
            "}"
        ],
        "description": "create jwt method"
    },
    "connect to MQTT": {
        "scope": "cpp",
        "prefix": "send13",
        "body": [
            "void mqttConnect() {",
            "\twhile (!mqttClient->connect(device->getClientId().c_str(),",
            "\t\t\t\"unused\", getJwt().c_str(), false)) {",
            "\t\tdelay(1000);",
            "\t}",
            "\tscreen.println(\"Connected to MQTT\");",
            "\tmqttClient->subscribe(device->getConfigTopic());",
            "\tmqttClient->subscribe(device->getCommandsTopic());",
            "}"
        ],
        "description": "connect to MQTT"
    },
    "call connect from loop": {
        "scope": "cpp",
        "prefix": "send14",
        "body": [
            "if (!mqttClient->connected()) {",
            "\tif (WiFi.status() != WL_CONNECTED) {",
            "\t\tinitWifi();",
            "\t}",
            "\tmqttConnect();",
            "}"
        ],
        "description": "call connect from loop"
    },
    "send temp and light data in loop": {
        "scope": "cpp",
        "prefix": "send15",
        "body": [
            "String message1 = \"{\\\"light\\\": \" + String(light) + \"}\";",
            "mqttClient->publish(device->getEventsTopic(), message1);",
            "delay(5000);",
            "String message2 = \"{\\\"temp\\\": \" + String(temp) + \"}\";",
            "mqttClient->publish(device->getEventsTopic(), message2);",
            "screen.println(\"Messages sent\");"
        ],
        "description": "send temp and light data in loop"
    }
}